{"version":3,"sources":["logo.svg","task.js","Title.js","Loading.js","StatusDropDown.js","Subtasks.js","ShowSubtask.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","statuses","subtasks","sleep","timeout","Promise","resolve","setTimeout","getIssue","a","id","title","description","assignee","status","getSubtasks","map","Title","className","Loading","value","label","StatusDropDown","statusValue","defaultValue","options","Subtasks","handleSubTask","task","index","key","onClick","e","preventDefault","href","ShowSubtask","useState","open","setOpen","subTasks","setSubTasks","useEffect","subTask","App","data","setData","result","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.38af435b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Arrow characters to use: ▼ ▶\n\nconst statuses = [\"Todo\", \"In progress\", \"Done\"];\nconst subtasks = [11, 12, 13, 14, 15, 16, 17, 18];\nconst sleep = timeout => {\n  return new Promise(resolve => setTimeout(resolve, timeout));\n};\n\n// Available APIs\nexport const getIssue = async () =>\n  Promise.resolve({\n    id: 1,\n    title: \"sit amet erat nulla tempus vivamus\",\n    description:\n      \"In quis justo. Maecenas rhoncus aliquam lacus. Morbi quis tortor id nulla ultrices aliquet.\\n\\nMaecenas leo odio, condimentum id, luctus nec, molestie sed, justo. Pellentesque viverra pede ac diam. Cras pellentesque volutpat dui.\\n\\nMaecenas tristique, est et tempus semper, est quam pharetra magna, ac consequat metus sapien ut nunc. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti.\",\n    assignee: \"Nelli Bielfeld\",\n    status: \"In progress\",\n    subtasks: subtasks\n  });\n\nconst updateStatus = async (id, status) => {\n  await sleep(1000);\n\n  return;\n};\n\nexport const getSubtasks = async () => {\n  await sleep(500);\n\n  return subtasks.map(id => ({\n    id,\n    title: `Subtask ${id}`,\n    description: `Description for subtask ${id}`,\n    assignee: `User ${id}`,\n    status: statuses[id % 3]\n  }));\n};\n","import React from 'react';\n\nconst Title =({title})=>{\n    return <h1 className=\"title\">{title}</h1>;\n}\n\nexport default Title;","import React from 'react'\n\nconst Loading  = ()=> <div>Loading....</div>\n\nexport default Loading;","import React from 'react'\nimport Select from 'react-select'\n\nconst statuses = [ { value: 'Todo', label: 'Todo' },\n  { value: 'In progress', label: 'In progress' },\n  { value: 'Done', label: 'Done' }\n  ];\n\n\nconst StatusDropDown = ({status})=>  {\n  const statusValue = {\n      value : status,\n      label :status\n  }\n  return ( <div className=\"dropDownSelect\"><Select defaultValue = {statusValue} value={statusValue} options={statuses} /></div>);\n}\n       \n\n\nexport default StatusDropDown;\n    ","import React from 'react'\n\nconst Subtasks = ({handleSubTask,subtasks})=>{\n    return (<div>\n        <ul className=\"listSubTask\">\n        { subtasks.map((task,index)=>{\n           return  <li key={index} className=\"task\"> <a onClick={(e)=>{\n               e.preventDefault();\n               handleSubTask(task)\n               }} href=\"\">{task.title}</a></li>\n        })}\n        </ul>\n    </div>);\n};\n\nexport default Subtasks;","import React ,{useState,useEffect}from 'react'\nimport {getSubtasks} from './task'\nimport Subtasks from './Subtasks';\nconst ShowSubtask = ({handleSubTask})=>{\n    \n    const [open,setOpen] = useState(false);\n    const [subTasks,setSubTasks] = useState([]);\n    const setSubTaskStatus = (e)=>{\n            e.preventDefault();\n            setOpen(!open);\n            \n    }\n    useEffect(()=>{\n        if(open){\n            (async function fetchSubtask (){\n                const subTask = await getSubtasks();\n                setSubTasks(subTask);\n            }())\n            \n        }\n        if(!open){\n             setSubTasks([]);\n        }\n    },[open])\n    return(<>\n            <div className={ open ?'subtaskArrowOpen':'subtaskArrowClose'}>\n                <a onClick={setSubTaskStatus} href=\"\">Show subtasks</a>\n            </div>\n            { <Subtasks handleSubTask= {handleSubTask} subtasks={subTasks}/> }\n    </>)\n    \n}\n\nexport default ShowSubtask;","import React,{useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { getIssue } from './task';\nimport Title from './Title';\nimport Loading from './Loading';\nimport StatusDropDown from './StatusDropDown';\nimport ShowSubtask from './ShowSubtask'\nfunction App() {\n    const [data, setData] = useState();\n\n  const handleSubTask = (task)=>{\n      task && setData(task);\n  }  \n\n  useEffect(() => {\n     (async function fetchData(){\n      const result = await getIssue();\n      setData(result);\n      console.log(result);\n    }())\n  },[])\n  return (\n    <div className=\"container\">\n      {data ? <div className=\"issueContainer\">\n                    <div className=\"header\">\n                        <Title title={data.title} />\n                        <StatusDropDown status={data.status}/>\n                    </div>\n                    <ShowSubtask handleSubTask={handleSubTask}/>\n        </div> : <Loading/>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}